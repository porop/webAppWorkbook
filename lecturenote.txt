JAVA Web development workbook

1.1 
Desktop Application의 한계
-Deployment: 기능 추가, 변경에 따른 배포가 필요할 때 어려움.
-Security: 애플리케이션 실행코드 내 DB 접속 정보 등이 포함되어, 추출되기 쉬움.

1.2
Client-Server Application
: Buisness Logic, Data Logir을 Server에 포함되도록 하여, 업무 변화에 대응이 쉬워지고, DB 접속의 보안이 강화된다.

1.3
다중 클라이언트의 요청을 처리하기 위해, 서버 애플리케이션에서 Multi-thread를 도입한다.
-> Client-Server Application은 Desktop Application보다 더 복잡하다. Main Logic 외의 Network, Multi-thread, DB connection, transaction, security, JAVA bean... Managing other resources..와 같은 영역들을 자동화할 수 있다면, 프로그램이 한층 가벼워질 것.

1.4
-Traditional Client/Server: Client(UI, Business Logic) <-Data request/response-> Server(DBMS)
-->자료를 한 곳의 서버에서 관리하여 중복이나 불일치 방지. 프로그램의 변경에 따른 배포문제, Client의 DBMS 직접 접속에 따른 보안이슈.
-Adavanced Client/Server: Client(UI, Verify User Input) <-Data request/response -> Application Server(Business Logic, Manage User Access) <-SQL Query/Result -> DBMS Server
--> DB 접속 정보 노출 방지, Business Logic관련 기능 변경 배포없이 가능.

1.5
웹 애플리케이션 아키텍처
-DBMS Server: Data 처리
-Application server: Business Logic, SQL Query 및 Data 관리, 사용자 접근 관리, UI 생성
-Web Server: 클라이언트와 통신, 다중 클라이언트 접속 관리.
-Web Browser: User Interaction, UI Rendering

웹 환경에서는 서버 내에 비즈니스 로직과 UI 로직을 모두 배치하여, 기눙 추가, 변경을 서버쪽에서만 바꾸어 적용할 수 있다.
하지만, 클라이언트가 매번 UI 로직을 내려받아야하므로, 네트워크 오버헤드가 발생함.
-> AJAX(Asynchronous JavaScript and XML): 같은 화면에서 데이터만 바뀔 때, 화면은 그대로 두고 데이터만 받아오는 기술.
-> 변화에 유연하게 대응이 가능한 설계 (MVC Architecture, Bean 관리 컨테이너, 의존 객체 주입 등)

1.6
Desktop Application: PC의 resources를 자유롭ㅂ게 사용할 수 있어, 개인용 어플리케이션에 적합.
C/S Application: 여러 사용자가 동시에 작업해야 하는 기업용 어플리케이션에 적합함. 업무변화가 심하거나, DB 서버가 그대로 노출될 경우, 부적합.
Web Application: 웹브라우저가 있다면 설치 없이 애플리케이션을 사용할 수 있으며, 표준 웹 프로토콜인 HTTP를 이용하므로 이기종 플랫폼 간 연결을 지원하고, 다양한 멀티 스크린 환경해 대해 일관되고 유연하게 대응할 수 있다. HTML 등 웹기술로 역동적인 UI를 구성할 수 있다.

2.1
HTTP(Hyper-Text Transfer Protocol): Web Browser와 Web Server간 데이터 통신 규칙.
HTTP 프로토콜의 응용/확장
-SOAP(Simple Object Access Protocol)
-RESTful(REpresentational State Transfer)
-WebDAV(World Wide Web Distributed Authoring and Versioning)
-CalDAV(Calendar Distributed Authoring and Versioning)
HTTP Proxy 프로그램으로 Web Browser와 Web Server 간에 주고받는 데이터를 모니터링할 수 있다. (Charlse, Fiddler...)
*Proxy Server? Client와 Server 간 통신을 중계해주는 컴퓨터/프로그램. 주로 서버의 응답 결과를 cache로 저장하거나, 데이터를 감시하는 보안 기능을 위해 사용한다.

HTTP 요청: 요청 데이터 라인의 각 문자열 끝에 개행문자를 붙여 서버로 보낸다.
-Request line: 메서드, 요청URI, 프로토콜 버전으로 구성된다. (ex)GET / HTTP/1.1)
 -메서드: GET, POST, HEAD, PUT, DELETE, TRACE, CONNECT, OPTIONS 등
 -요청URI: 요청하는 자원의 식별자. HTML, Image, Video, Application 등이 있는 가상의 경로.
 -버전: 요청 정보가 어떤 버전에 맞추어 작성했는지 알려주기 위함.
-Requiest Header: 서버가 요청을 처리할 때 참고하라고 클라이언트가 알려주는 정보. 헤더 이름과 값의 쌍으로 표시하며, 다음의 네가지 종류가 있다.
 -General Header: 요청, 응답 모두에 적용할 수 있음. Cache-Control, Connection, Date, Pragma, Trailer, Transfer-Encoding, Upgrade, Via, Warning
 -Request Header: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Authorization, Expect, From, Host, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Max-Forwards, Proxy-Authorization, Range, Refere, TE, User-Agent(OS, Browser information)
 -Response Header: Accept-Ranges, Age, ETAg, Location, Proxy-Authenticate, Retry-After, Server, Vary, WWW-Authenticate
 -Entity Header: 보내거나 받는 본문 데이터를 설명함. Allow, Content-Encoding, Content-Launguage, Content-Location, Content-MD5, Content-Range, Content-Type, Expires, Last-Modified, etc extended headers...
*개행문자: MS Window에서는 CR. Carriage Return 코드와 LF. Linefeed 코드를 함께 사용하여 개행을 표시하나, Linux나 Mac OSX 등 Unix 계열에서는 LF 코드만 사용하여, 서로 호환이 되지 않는 경우가 발생한다.
-Empty Line: 요청 헤더의 끝을 표시하는 공백 라인
-Message Body: GET요청은 공백라인으로 끝나고, 서버에 보낼 데이터가 있다면, URL 주소에 붙여 보내지만, POST 요청은 공백 라인 다음에 서버에 보낼 데이터가 온다.

HTTP 응답: 웹 서버는 웹 브라우저의 요청에 대한 작업을 수행한 후 응답 데이터를 보낸다.
-Status Line: 프로토콜 버전과 상태코드, 설명으로 구성된다. (ex)HTTP/1.1 200 OK)
 -응답 상태코드: 200 Success, 301 Moved Permanatly, 304 Not Modified, 400 Bad Request, 404 Not Found, 500 Server Error (http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
 -응답 헤더: 응답 데이터를 처리할 때 참고하라고 서버가 알려주는 정보. Content-Type은 웹 브라우저에게 보내는 데이터의 형식, Content-Length는 웹 브라우저에게 보내는 message-body의 Byte 크기
-Empty Line: 메세지 헤더의 끝을 표시하는 공백 라인
-Message Body: 응답 데이터

*Protocol
-FTP. file Transfer Protocol
-Telnet: Internet이나 LAN(Local Area Network) 상에서 문자 기분으로 원격의 컴퓨터를 제어하기위한 통신 규약 -> 보안의 이유로 SSH(Secure Shell) Protocol 원격 접속 프로그램을 주요 사용.
-XMPP. Extensible Messaging and Presence Protocol: Instance Message 및 사용자의 접속 상태 정보를 교환할 목적으로 만든 통신 규약. Google Talk
-SMTP. Simple Mail Transfer Protocol: 인터넷 상에서 메일을 보내기 위한 통신 규약. 
-POP3. Post Office Protocol version 3:이메일을 가져오는 데 사용하는 통신 규약. 이메일을 가져온 후 서버의 메일을 삭제함.
-IMAP. Internet Message Access Protocol: 이메일을 가져오는 데 사용하는 통신 규약. 이메일을 가져온 뒤에 서버의 메일을 지우지 않으나, POP3에 비해 통신 트래픽이 높다.
-LDAP. Lightweight Directory Access Protocol: Directory Service에 등록된 자원들을 찾는 통신 규약.
IRC. Internet Relay Chat: 실시간 채팅을 위한 통신 규약.

2.2 GET
GET의 특징
-URL에 데이터를 포함. 데이터 조회에 적합하다.
-> GET 요청에서는 서비스 주소뒤에 '?'문자를 붙이고 데이터를 '매개변수=값'형태로 '&'의 구분자를 붙여 전달한다. 
-URL에 데이터가 포함되어, 전달하거나 공유하기에 용이하다.
-웹 브라우저 주소창에 정보가 그대로 노출되기 때문에, 보안 문제가 발생함.
-바이너리 및 대용량 데이터 전송 불가
-요청라인과 헤드 필드의 최대 크기: HTTP사양에는 제한 없으나, 대용량 RUL로 인한 문제 가 발생하므로 웹 서버에 따라 최대 크기를 제한한다. (8KB, 16KB..)

GET요청의 종류
-웹 브라우저의 주소창에 주소 입력
-링크 클릭
-입력폼의 method의 속성을 GET으로 지정했을 때.

2.3 POST
POST의 특징
-URL에 데이터가 포함되지 않아, 외부 노출이 방지된다.
-메시지 본문에 데이터 포함되어 실행 결과를 공유할 수 없다.
-바이너리 및 대용량 데이터 전송이 가능하다.
-데이터를 전달할 때, '&', '='의 구분자를 사용하므로 바이너리 데이터 안에 이러한 문자 코드가 포함하고 있으면 잘못 해석될 수 있어, 바이너리 보낼 때에는 멀티파트 방식을 통해 전달한다.
*멀티파트 방식
-멀티파트 전송에서는 일반 전송 방식과 달리 Content-Type 헤더에 미디어 형식과 구분자를 정의한다. (ex) Content-Type:multipart/form-data; boundary=----Web---PyZ)
-boundary 값은 각각의 매개변수 값을 분리할 때 '&'을 대체하기 위해 웹 브라우저에서 임의로 생성한 구분자로 파트 구분자 뒤에 매개변수 정보가 오고, 공백 라인 이후부터 다음 파트 구분자가 나타날 때까지 바이너리 데이터가 온다.

Servlet: Java에서 Server Application을 쉽게 개발할 수 있도록 제공하는 기술. Java로 만든 CGI Program.
--> Servlet Interface(HttpServlet...)을 잘 이해해야 한다.

3.1
CGI: Common Gateway Interface
Web Browser-Web Server간 규칙: HTTP <-> Web Server-Web Application간 규칙: CGI

CGI Program유형
-Compile 방식: 기계어 -> Web Server에서 바로 Execute / 실행 속도가 빠르지만, 변경 시 컴파일/재배포 문제가 있음.
-Interpreter 방식: Script(.php, .pl, .asp, .py) -> Web Server에서 Script Engine을 통해 Script를 해석하여 실행  
-JAVA: JAVA(.class) -> Web Server에서 JAVA를 실행할 수 있는 JVM을 포함한 CGI 프로그램을 실행시켜야 함. -> Servlet Container를 실행시켜, Servlet Container는 Servlet의 생성/실행/소멸, Life cycle을 관리함.
-Servlet Container: Servlet을 대신하여 CGI 규칙에 따라 웹 서버와 데이터를 주고받음. Servlet은 Servlet Container간의 규칙에 따라 동작해야 함.

3.2
Java EE: Java Platform, Enterprise Edition
-기능 확장 및 이기종 간 이식이 쉽고, 신뢰성과 보안성이 높고, 트랜잭션 관리와 분산 기능을 쉽게 구현할 수 있는 기능을 제공함.
-기업용 애플리케이션과 클라우드 애플리케이션 개발에 필요한 여러 복합기술들이 정의되어있음.
-Java EE 기술 중 Servlet, JSP는 웹을 기반으로 한 클라이언트/서버 기술을 정의

WAS: Web Application Server
-Application Server: Client-Server Architecture에서 Server side Application의 생성, 실행, 소멸을 관리하는 프로그램.
-WAS: Java EE 기술 사양을 준수하여 만든 서버. JAVA EE Implimentation. Servlet Container와 같이 웹 기술을 기반으로 동작되는 어플리케이션.
-Servlet, JSP Programming 시, WAS가 어떤 Java EE버전의 구현체 인지, 하위 기술의 버전을 확인하고 개발해야 한다.
*Tomcat, Jetty, Resin, JEUS(tmax), JBross(redhat), WebLogic(Oracle), WebSphere(IBM)

3.3
Practice: Servlet 프로그램 만들기.
1) File > New > Dynamic Web Project
2) Project Name 입력 > Target runtime에 실행서버 지정 > Dynamic web module version(Servlet version) 지정 > Web Application 배치 정보:Web Application 이름, 웹 콘텐츠 파일 작업폴더 경로 입력, web.xml 자동 생성 설정
Dynamic Web Project 폴더구조
-src: Java Class 파일(Servlet, Filter, Listener 등), .properties 파일
-build/classes: Complie된 Java Class 파일
-WebContent: .html, .css, .js, .jsp, 이미지파일 등 웹 콘텐츠
-WebContent/WEB-INF: Web Application 설정 파일.클라이언트에서 요청할 수 없는 경로
-WebContent/WEB-INF/web.xml: Web Application Deployment Descriptor. DD file. Web Application Component(Servlet, Filter, Listener, Parameter, 기본웹페이지 등) 배치 정보 작성.
-WebContent/WEB-INF/lib: 라이브러리 .jar 파일

3.4
Servlet Container에 의해 실행되려면, javax.servlet.Servlet을 구현해서 만들어져야 함: Servlet Container가 Servlet에 대해 호출할 메서드를 정의한 것.
->Unimplemented methods: init, service, destroy, getServletConfig, getServletInfo
-Servlet의 생명주기와 관련된 메서드: init(), service(), destroy()
 -init(): Servlet이 Client의 요청을 처리하기 전에 준비할 작업을 수행하는 곳. ex) DB 혹은 External Storage Server에 연결. Property Loading 등
 -service(): Client가 요청할 때마다 호출되는 메서드. Servlet이 해야 할 일을 작성.
 -destroy(): Servlet Container가 종료되거나, 웹 애플리케이션이 멈출 때, 해당 Servlet을 비활성화 시킬 때 호출됨. 마무리 작업을 작성. ex) 자원 해제, 데이터 저장 등
-기타 보조 메서드
 -getServletConfig(): Servlet 설정 정보 객체를 반환. Servlet의 이름, 초기 매개변수 값, 환경정보를 얻을 수 있음.
 -getServletInfo(): Servlet을 작성한 사람, 버전, 권리 등을 담을 문자열을 반환. Servlet Container의 관리자 페이지에 출력되기도 함.

-Servlet Deployment: web.xml에 배치정보 추가
 1.서블릿 선언 
  <servlet>
  <servlet-name>XXX</servlet-name>
  <servlet-class>xx.xx.xx</servlet-class>
  </servlet>
 2.서블릿을 URL과 연결
  <servlet-mapping>
  <servlet-name>XXX</servlet-name>
  <url-pattern>/xxx</url-pattern>
  </servlet-mapping>
-Servlet실행: url/Web Application 이름/Mapping 이름
-Servlet 구동절차
 1. Client요청 -> Servlet Container
 2. Servlet Container는 Servlet Instance를 찾음.
 3. Servlet Instance가 없으면, Class 로딩, Instance를 준비한 후, 생성자 호출, init()을 호출.
 4. Client요청을 처리하는 service() 메서드 호출.
 5. service()에서 HTTP 프로토콜에 맞춰 클라이언트에 응답.
 6. Servlet Conatiner나 Web Application이 종료되면, Servlet Container가 생성된 모든 서블릿에 대해 destroy()를 호출한다.
 *Servlet Instance는 하나만 생성되어 웹 애플리케이션이 종료될 때까지 사용된다. 따라서, 인스턴스 변수에 특정 클라이언트를 위한 데이터를 보관하기 위해 사용하면 안된다.
 *Welcom Files: Directory의 기본 웹페이지. Servlet 이름이 생략되고, 디렉터리 위치까지만 지정된다면, 웹 서버는 해당 디렉터리에서 웰컴 파일을 찾아서 보내준다.
  <welcome-file-list>
  <welcom-file>XXX</welcom-file> ....
  </welcome-file-list>

3.5
서버에 웹 프로그램 배치하기
-Eclipse Test Server
 -Server Context Menu에서 Add and Remove..를 통해 웹 모듈을 등록/해제할 수 있다.
 -임시배치폴더: Eclipse Workspace > .metadata > .plugins > org.eclipse.wst.server.core > tmp# > wtpwebapps > project name: WebContent 폴더 내용이 모두 복사되어있음. Build 하위 class파일과 Library가  WEB-INF 하위에 복사되어있음.
 -웹 애플리케이션을 배치할 때, 폴더의 이름은 Context root 이름을 사용.
-Production Server(Tomcat)
 -Export > War:압축파일 > Server(#TOMCAT_HOME) 하위 webapps폴더에 복사 > Server startup 실행
 -Tomcat 서버관리 메인페이지 > ManagerApp

3.6
Interface: Caller-Callee 간의 호출 규칙
Servlet Interface: Servlet Container:Tomcat Server-Servlet Program
-init(): Instance 생성 후, 1회 호출됨. Ready for service. (DB connection, Resource 생성, 준비...)
-destroy(): Web Server or Web Application 종료 직전. Ready to die. (DB, Resource 해제...)
-service(): Client요청 때마다 호출됨. TO DO.
Servlet Class: Servlet Interface를 구현한 Class
->service()는 필수. service() 외에 4개 클래스는 필요할 때만 구현.
"GenericServlet"은 Abstract Class
->init, destroy, getServletConfig, getServletInfo를 구현해둔 Class

service()함수의 매개변수
1)ServletRequest: 클라이언트의 요청정보를 다룰 때 사용.
 -getRemoteAddr(): Client의 IP address 반환
 -getScheme(): Client가 요청한 URI 형식. 즉 ':'문자 전에 오는 자원을 식별하는 최상위 분류 기호. ex)http, https, ftp, file, news 등
 -getProtocol(): 요청 프로토콜의 이름과 버전을 반환. ex)HTTP/1.1
 -getParameterNames(): 요청 정보에서 매개변수 이름만 추출하여 반환.
 -getParameterValues(): 요청 정보에서 매개변수 값만 추출하여 반환.
 -getParameterMap(): 요청 정보에서 매개변수들을 Map 객체에 담아서 반환.
 -setCharacterEncoding(): POST 요청의 매개변수에 대해 문자 집합을 설정. 기본값 ISO-8859-1 *getParameter..()보다 먼저 호출해야 함.
  GET 요청의 경우, 매개변수 값이 URI에 포함되기 때문에 사용할 수 없고, Servlet Container에서 URI 인코딩 형식을 설정해야 함. ex)server.xml <Connector ... URIEncoding="UTF=8"/>
2)ServletResponse: 클라이언트에게 출력하는 데이터와 관련된 기능을 제공.
 -setContentType(): 데이터의 인코딩 형식과 문자 집합을 지정. ex)response.setContentType("text/plain");
 -setCharacterEncoding(): 출력할 데이터의 문자 집합을 지정. 기본값 ISO-8859-1 ex)response.setCharacterEncoding("UTF-8") *setConentType()을 사용하여 설정할 수 있다. ex)response.setContentType("text/plain;chartset=UTF-8");
 -getWriter(): 클라이언트로 출력할 수 있도록 출력 스트림 객체를 반환
 -getOutputStream(): 바이너리 데이터를 출력할 수 있는 출력 스트림 객체를 반환. *setContentType(), setCharacterEncoding()이 먼저 호출되어야 함.

@WebServlet Annotation을 이용한 서블릿 배치(Servlet 3.0~). 다음의 속성을 갖는다
-name: 서블릿의 이름. 기본값 "" ex) @WebServlet(name="서블릿이름")
-urlPatterns: 서블릿의 URL 목록을 설정. String배열이나, 일반 String으로 표기 가능하다. 기본값은 {}
 ex)@WebServlet(urlPatterns="/calc"), @WebServlet(urlPatterns="/calc", "calc.do", "calculator.action")
-value: urlPatterns와 같은 용도로, value속성은 단독으로 설정할 때에는 속성 이름 없이 값만으로 설정 가능하다.
 ex)@WebServlet(value="/calc"), @WebServlet("/calc"), @WebServlet("/calc", name="Calculator") => (X) error

3.7
Web Application: Web Server가 실행시키는 프로그램. CGI Program
CGI. Common Gateway Interface: Web Server와 Web Application 사이에 데이터를 주고받기 위한 규칙.
Servlet: Java로 만든 Web Application. Client에게 제공하는 작은 단위의 서버 프로그램.
Servlet Container: Servlet의 생성, 실행 ,소멸 - 생명주기를 관리하는 프로그램. Servlet Container는 Client의 요청에 대해, 서블릿 호출 규칙에 따라 서블릿 메서드를 호출. 이 호출 규칙은 javax.servlet.Servlet 인터페이스에 정의되어 있어, Servlet은 Servlet Interface를 반드시 구현해야 함.
Java EE: Servlet 규칙 외에 JSP를 만들고 실행하는 규칙, EJB. Enterprise JavaBeans라는 분산 컴포넌트에 관한 규칙, 웹 서비스에 관한 규칙 등 기업용 애플리케이션 제작에 필요한 기술 사양을 정의한 것. 기능 확장이 쉽고, 이기종간 이식이 쉬우며, 신뢰성, 보안성이 높고, 트랜잭션 관리와 분산 기능을 쉽게 구현할수 있는 기술을 제공.
WAS. Web Application Server: Java EE Implementation. Java EE 사양에 따라 개발된 서버. JEUS, WebLogic, WebSphere, JBoss Enterprise, Geronimo, GlassFish, JBoss Community 등
Servlet Container: JAVA EE 사양 중 Servlet과 JSP 기술만 구현한 서버. Tomcat, Resin, Jetty
javax.servlet.GenericServlet: 추상클래스. Servlet 인터페이스에 선언된 메서드 중 service() 구현에만 집중할 수 있도록 나머지 메서드를 모두 구현. 

4
1.Application 직접 File I/O -> Application이 DBMS을 통해 File I/O
2.Application의 DBMS사용 규칙을 표준화: SQL. Structured Query Language
-> DB가 할 일을 SQL로 작성하고, JDBC를 사용하여 DB로 SQL을 보내고 결과를 받음.
3.Application DBMS과 통신하기 위해 DBMS별 프로토콜/소켓 프로그래밍  필요: Vendor(Native) API를 제공함.
4.DBMS별 전용 Application이 필요함.
5.ODBC. Open DataBase Connectivity API에 따라 Vendor별로 ODBC Driver
6.ODBC API 호출단계가 추가되어 속도가 느리고, C/C++라서 Java로 호출할 수 없음.
7.JDBC. Java DataBase Connectivity
 -7.1. JDBC Type1: JRE에 기본으로 포함. ODBC 드라이버 사용하여 ODBC보다 더 느리다. Excel, Text 접근에 유용.
 -7.2. JDBC Type2: 각각 DBMS에서 제공하는 API. Vender API를 직접 호출하여 ODBC 사용 안 하고, Native API를 호출. DBMS로부터 별도 다운로드 필요.
 -7.3. JDBC Type4: DBMS와 전용 프로토콜로 직접 통신. Pure JAVA. DBMS로부터 별도 다운로드 필요.

4.1
JDBC 조회 Servlet
-1.Register JDBC Driver: new com.mysql.jdbc.Driver()
-2.Connect with MySQL Server with driver: DriverManager.getConnection()
-3.Ready statement object from connection object: Connection.createStatement();
-4.Do query with statement object: Statement.excuteQuery()
-5.Set content Type of response object: response.setContentType()
-6.Print data from server: while(ResultSet.next()){}
-7.Release resources: ResultSet -> Statement -> Connection

*DBMS 연동 서블릿 만들기
 1)WEB-INF/lib 폴더에 JDBC드라이버(Type4)를 받습니다.
 2)GenericServlet을 상속받은 Servlet을 생성, service()함수를 구현.
 2.1)HttpServlet을 상속받은 Servlet을 생성. doGet()함수, doPost()함수를 구현.
 GenericServlet을 상속받은 HttpServlet이 service함수를 대신해서 구현함.
 -> 클라이언트의 요청방식에 따라 service에서 내부적으로 호출하는 doGet(), doPost(), doHead() 등의 메소드를 구현.
 *GET요청: 1)Web Browser의 주소창의 URL로 연결 2)<a>태그의 링크 선택 3)<form>태그의 method가 get일 때
 3)JDBC관련 객체 주소를 보관할 참조 변수 선언.(Connection, Statement, ResultSet)
 4)JDBC API를 사용할 부분을 try~ catch~문으로 감싸고, 발생한 예외를 ServletException으로 Servlet Container에 던짐.
 5)DriverManager를 이용하여 java.sql.Driver 인터페이스 구현체(ex)com.mysql.jdbc.Driver) 등록
  -Driver구현체의 주요 메서드: getMajorVersion(), getMinorVersion(), acceptsURL(), connect()
  ->DriverManager는 구현체를 통해 Driver 정보를 확인, 사용할 Driver를 결정함.
 6)getConnection()을 호출하여 DB연결. java.sql.Connection 인터페이스 구현체가 리턴됨.
  -Connection구현체의 주요 메서드: createStatement(), prepareStatement(), prepareCall(), commit(), rollback()
 7)createStatement()를 호출하여 SQL문을 실행할 객체 준비. java.sql.Statement 인터페이스 구현체가 리턴됨.
 7.1)prepareStatement()를 호출하여, 매개변수를 이용한 SQL문을 실행하기 위한 객체를 준비.  매개변수는 준비된 Statement 객체의 setXXX()함수를 이용하여 설정.
  -Statement구현체의 주요 메서드: executeQuery(), executeUpdate(), execute(), executeBatch()
 8)executeQuiery()를 사용하여 SQL문(SELECT문)을 서버에 보내기. java.sql.ResultSet 인터페이스 구현체가 리턴됨.
  -ResultSet구현체의 주요 메서드: first(), last(), previous(), next(), getXXX(), updateXXX(), deleteRow()
 8.1)executeUpdate()를 사용하여 SQL문(INSERT문)을 서버에 보내기. 결과 레코드를 만들지 않는 DDL, DML 종류의 SQL문을 실행할 떄, executeUpdate()를 호출.
 9)결과 출력
 10)마무리:자원해제. 정상적으로 수행되든 오류가 발생하든 반드시 수행되기 위해 finally 블록 내에 작성.
  -각 자원 해제 중 오류가 발생하여도 다음 자원을 해제하기 위해 try~ catch~문 사용. 자원 해제에 실패하더라도 할수있는 작업이 없으므로, catch 블록은 비어있음.
  -사용된 자원을 역순으로 해제해야 함.
*PreparedStatement: 질의할 때마다 SQL문을 컴파일하는 Statement와 달리, SQL문을 미리 준비하여 컴파일해두고, 입력 매개변수 값만 추가하여 서버에 전송. 여러 번 반복질의하는 경우, 실행속도가 빠름. 바이너리 데이터 전송이 가능하고, SQL문과 입력 매개변수가 분리되어 있어 코드 작성이 편하다.

4.4
*인코딩 문제
Servlet에서 getParameter()를 호출하면, 이 메서드는 기본적으로 매개변수의 값이 ISO-8859-1로 인코딩되었다고 가정하고 유니코드로 바꾸어 반환합니다.
한글 깨짐을 해결하려면, 
->POST방식에서 getParameter()호출 전에 Client가 보낸 매개변수의 인코딩 형식을 지정해야 함.
request.setCharacterEncoding("UTF-8")
->GET방식에서 매개변수는 URL에 쿼리스트링으로 포함되므로, setCharacterEncoding()이 적용되지 않으며, Servlet Container의 Connector태그에 URIEncoding 옵션을 추가해주여야 함.
<Connector ... URIEncoding="UTF-8" />

4.5 Refresh: 일정 시간이 지나고 나서 자동으로 서버에 요청을 보냄
1) 응답 헤더에 리프레시 정보를 추가. response.addHeader("Refresh", "1;url=list");
2) 메타 태그를 이용한 리프레시:  out.println("<meta http-equiv='Refresh' content='1;url=list'>");
4.6 Redirect: 결과를 출력하지 않고 즉시 서버에 요청을 보냄. 응답 상태 코드가 302로 출력됨.
-HttpServletResponse의 sendRedirect()호출: response.sendRedirect("list");